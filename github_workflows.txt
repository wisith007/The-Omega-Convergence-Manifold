# .github/workflows/ci.yml
name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual trigger

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===============================
  # PROJECT ANALYSIS & SETUP
  # ===============================
  analyze:
    name: Project Analysis
    runs-on: ubuntu-latest
    outputs:
      has-python: ${{ steps.detect.outputs.has-python }}
      has-node: ${{ steps.detect.outputs.has-node }}
      has-docs: ${{ steps.detect.outputs.has-docs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Detect Project Type
        id: detect
        run: |
          echo "has-python=$([ -f requirements.txt ] || [ -f setup.py ] || [ -f pyproject.toml ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has-node=$([ -f package.json ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has-docs=$([ -d docs ] || [ -f mkdocs.yml ] || [ -f conf.py ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
      
      - name: Repository Health Check
        run: |
          echo "=== Repository Analysis ==="
          echo "Files: $(find . -type f | wc -l)"
          echo "Lines of code: $(find . -name "*.py" -o -name "*.js" -o -name "*.md" | xargs wc -l | tail -1)"
          echo "Last commit: $(git log -1 --format='%h %s')"

  # ===============================
  # PYTHON TESTING & QUALITY
  # ===============================
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: analyze
    if: needs.analyze.outputs.has-python == 'true'
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 black isort mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: Code Formatting Check
        run: |
          black --check --diff .
          isort --check-only --diff .
      
      - name: Linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Type Checking
        run: mypy . --ignore-missing-imports || echo "Type checking completed with warnings"
      
      - name: Run Tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html -v
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # ===============================
  # NODE.JS TESTING (if applicable)
  # ===============================
  node-tests:
    name: Node.js Tests
    runs-on: ubuntu-latest
    needs: analyze
    if: needs.analyze.outputs.has-node == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Linting
        run: npm run lint || echo "No lint script found"
      
      - name: Run Tests
        run: npm test || echo "No test script found"
      
      - name: Build Project
        run: npm run build || echo "No build script found"

  # ===============================
  # SECURITY SCANNING
  # ===============================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Python Security Check
        if: needs.analyze.outputs.has-python == 'true'
        run: |
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || echo "Bandit completed with issues"
          safety check --json --output safety-report.json || echo "Safety check completed"

  # ===============================
  # DOCUMENTATION BUILD
  # ===============================
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: analyze
    if: needs.analyze.outputs.has-docs == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Documentation Dependencies
        run: |
          pip install sphinx mkdocs mkdocs-material sphinx-rtd-theme
          if [ -f docs/requirements.txt ]; then pip install -r docs/requirements.txt; fi
      
      - name: Build Documentation
        run: |
          if [ -f mkdocs.yml ]; then
            mkdocs build
          elif [ -f docs/conf.py ]; then
            cd docs && make html
          fi
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # ===============================
  # PERFORMANCE MONITORING
  # ===============================
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Repository Size Check
        run: |
          REPO_SIZE=$(du -sh . | cut -f1)
          echo "Repository size: $REPO_SIZE"
          
          # Check for large files
          echo "=== Large Files (>1MB) ==="
          find . -type f -size +1M -not -path "./.git/*" | head -10
      
      - name: Workflow Performance
        run: |
          echo "Workflow started at: $(date)"
          echo "Runner: ${{ runner.os }} - ${{ runner.arch }}"

  # ===============================
  # DEPLOYMENT READINESS
  # ===============================
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [python-tests, security]
    if: always()
    
    steps:
      - name: Check All Jobs Status
        run: |
          echo "Python Tests: ${{ needs.python-tests.result }}"
          echo "Security Scan: ${{ needs.security.result }}"
          
          if [[ "${{ needs.python-tests.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All checks passed - Ready for deployment"
          else
            echo "❌ Some checks failed - Review before deployment"
          fi

  # ===============================
  # NOTIFICATION & REPORTING
  # ===============================
  notify:
    name: Results Notification
    runs-on: ubuntu-latest
    needs: [analyze, python-tests, security, documentation]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "## 🚀 Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis | ${{ needs.analyze.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Tests | ${{ needs.python-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.documentation.result }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Repository Insights" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY